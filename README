workbench â€” a testbed for OnlineTA tests

OnlineTA workbench is a light-weight, cross-platform mimic implementation of
the OnlineTA testing interface. It is intended as a programming environment for
teachers to develop tests for OnlineTA.

In principle, you can use workbench to test student submissions locally, but
beware that workbench only mirros the OnlineTA testing interface, and DOES NOT
perform any sandboxing. What might be safe to test online, is not likely to be
safe to test with workbench. That is, unless you trust the students not to
misbehave beyond reason, or like living on the edge.

# Example

See the ./assignments/ subdirectory for some sample assignments. For each of
them, there are a couple sample good and bad solutions under
./submissions/<assignment>/.

For instance, you might consider running:

  $ ./workbench ./assignments/c-stackcalc/ ./submissions/c-stackcalc/good/

# Testing Interface

The testing of a submission is stratified into strata, or phases. This has
multiple benefits:

1. Preconditioning. For instance:

  * Student code must be adequately structured (e.g. contain a src directory)
    for any further analysis to take place.

  * Student code must compile before we can try to run it.

  * Student code must finish executing before we do any post-processing of the
    resulting environment.

2  Security. There are several benefits in terms of security:

  a. Breaking out of the sandbox in one strata, does not (immediately) give
     any means to exploit the next strata.

  b. Different sandboxing models can be employed at different strata;
     reinforcing benefit 2.a., requiring to break out of multiple sandboxing
     approaches for ultimate exploitation of the testing system.

One particular application of benefit 2.b., as exemplified in this workbench,
is the split between static and dynamic testing.

By declaring a static stratum, the teacher states that the student submission
is to be regarded as data --- it should never be succeptible to execution.
Instead, the teacher would like access to the files of the submission, and
perhaps modify and create new files to pass on to future strata (e.g. compile
the submitted code).

On the other hand, by declaring a dynamic stratum, the teacher states that
access is only needed to e.g. the input and output streams of the program
submitted by the student (and not its source code). This means that the teacher
and student code can run sandboxed from each other, and communicate via
sockets, or a further constrained protocol.

Of course, in the presence of vulnerabilities in teacher code, what is regarded
as data may quickly become programs; and of course, source code can be
exchanged via sockets. This separation permits merely to employ different
sandboxing models at the two types of strata, and is fairly elicit for teachers
(in Computer Science) to follow.
