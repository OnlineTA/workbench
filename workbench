#!/usr/bin/env bash
#
# Copyright (c) 2015 OnlineTA.
#
# Copenhagen Liberal License - v0.2 - May 2015.

function usage {
  echo "Usage: $0 ASSIGNMENT SUBMISISON"
}

ASSIGNMENT=$1
SUBMISSION=$2

if [ ! -d "$ASSIGNMENT" ] || [ ! -d "$SUBMISSION" ] ; then
  # TODO: maybe check that it actually looks like an assignment and submission,
  # somehow..
  usage
  exit 1
fi

TMPDIR=$(mktemp --tmpdir --directory workbench.XXXXXX) || exit 1

function clean {
  info "Shredding ${TMPDIR}."

  find "$TMPDIR" -type f -exec shred --remove {} \;
  # TODO: shreding depends on the underlying file system to actually overwrite
  # the data; this might be too lax an assumption on some systems.

  rm -rf "$TMPDIR"
  # TODO: directory structure doesn't get shredded.
}

function fail {
  clean
  exit $1
}

LOGTAG="$0[$$]"
LOG="echo"
function log {
  if [ "$LOG" == "logger" ] ; then
    logger -p "$1" -t "$LOGTAG" "$2"
  elif [ "$LOG" == "echo" ] ; then
    echo "$LOGTAG $1 $2"
  fi
}

function info {
  log user.info "$1"
}

function staticRun {
  FILE=$1
  info "Assessing static test ${FILE}."
  "$FILE" "$TMPDIR"
  case $? in
  0)
    info "${FILE} succeded!"
    ;;
  1)
    info "${FILE} failed with a continue signal."
    ;;
  2)
    info "${FILE} failed with a fatal signal; dropping remaining tests."
    return 1
    ;;
  *)
    info "${FILE} failed with an unknown signal; abandon the ship!"
    return 1
  esac
}

function staticPhase {
  info "Assessing static phase $1/."

  cd "$1" ; while IFS= read -r -d $'\0' FILE; do
    if ! staticRun "$FILE" ; then
      return 1
    fi
  done < <(find "." \
    -mindepth 1 -maxdepth 1 -type f -executable -print0 | sort -nz)
}

function dynamicRun {
  FILE=$1
  info "Running test ${FILE}."
  $FILE "$TMPDIR"
  case $? in
  0)
    info "${FILE} succeded!"
    ;;
  1)
    info "${FILE} failed with a continue signal."
    ;;
  2)
    info "${FILE} failed with a fatal signal; dropping remaining tests."
    return 1
    ;;
  *)
    info "${FILE} failed with an unknown signal; abandon the ship!"
    return 1
  esac
}

function dynamicPhase {
  info "Assessing dynamic phase $1/."

  while IFS= read -r -d $'\0' FILE; do
    if ! dynamicRun "$FILE" ; then
      return 1
    fi
  done < <(find "$1/" \
    -mindepth 1 -maxdepth 1 -type f -executable -print0 | sort -nz)
}

function assignment {
  info "Assessing assignment ${ASSIGNMENT}."

  while IFS= read -r -d $'\0' PHASE; do
    if [ -n "$(basename "$PHASE" | grep "static")" ] ; then
      if ! staticPhase "$PHASE" ; then
        return 1
      fi
    else
       if ! dynamicPhase "$PHASE" ; then
        return 1
      fi
    fi  
  done < <(find "${ASSIGNMENT}" \
    -mindepth 1 -maxdepth 1 -type d -print0 | sort -nz)
}

info "Assessing submission ${SUBMISSION}."
cp -r "${SUBMISSION}/"* "$TMPDIR/" || fail 1
info "Contents of ${SUBMISSION} copied to ${TMPDIR}/."

if ! assignment ; then
  fail 1
fi

clean
